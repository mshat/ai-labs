from parsers import SentenceParser
from query_solver import QuerySolver

class DialogContext:
#     user: UserData
#     state: DialogState
#     lastRecArr: []
#     lastRecInd: int

    def __init__(self):
        # self.user = UserData()
        # self.state = DialogState.NOTHING
        self.lastRecInd = -1
        self.lastRecArr = []


if __name__ == '__main__':
    query_solver = QuerySolver()
    # sentence = "дуэтом"
    # sentence = "выведи на экран всех артистов которые младше 45 лет но старше 28"
    # query = SentenceParser(sentence).parse(query_solver.state)
    # print(query)
    # print(query.words)
    # res = query_solver.solve(query)
    # print(res)
    # exit()
    # test_search_sentences = [
    #     "найди похожих исполнителей на крека",
    #     "найди похожих на моргенштерна",
    #     "похожие на басту",
    #     "найди исполнителей в жанре грайм",
    #     "исполнители в жанре поп",
    #     "покажи исполнителей мужчин",
    #     "артисты мужчины",
    #     "покажи исполнителей женщин",
    #     "артисты женщины",
    #     "покажи исполнителей мужского пола",
    #     "исполнители женского пола",
    # ]

    # test_filter_sentences = [
    #     "оставь исполнителей мужского пола",
    #     "убери всех исполнителей кроме женского пола",
    #     "оставь только соло исполнителей",
    #     "убери всех кроме соло исполнителей",
    #     "оставь только дуэты",
    #     "убери всех кроме дуэтов",
    #     "оставь только группы",
    #     "убери всех кроме групп",
    #     "убери исполнителей младше чем 20",
    #     "оставь исполнителей старше чем 22",
    #     "убери исполнителей старше чем 30",
    #     "оставь исполнителей младше чем 11",
    #     "оставь исполнителей в возрасте от 32 до 43",
    #     "показывай по 10 артистов",
    #     "выводи по 5 артистов",
    #     "удалить фильтры",
    #     'удалить фильтр',
    #     "убери ограничение на количество артистов",
    #     "выводи всех отфильтрованных",
    # ]

    # test_like_dislike_sentences = [
    #     "убери многоточие из списка лайков",
    #     "мне не нравится егор крид",
    #     "поставь дизлайк тимати",
    #     "добавь моргенштерна в список дизлайков",
    #     "убери моргенштерна из списка дизлайков",
    #     "мне нравится кровосток",
    #     'люблю нойза',
    #     'не люблю биг бейби тейпа',
    #     "мне нравится исполнитель кровосток",
    #     "добавь касту в список любимых",
    #     "поставь лайк касте",
    #     "мне больше не нравится тимати",
    # ]

    # test_general_sentences = [
    #     "сколько исполнителей в базе?",
    #     "сколько исполнителей ты знаешь?",
    #     "сколько мужчин в базе?",
    #     "сколько исполнителей мужчин ты знаешь?",
    #     "сколько женщин в базе?",
    #     "сколько исполнителей женщин ты знаешь?",
    #     "сколько ты знаешь исполнителей старше 26 лет?",
    #     "сколько исполнителей старше 11 лет?",
    #     "сколько ты знаешь исполнителей младше 333 лет?",
    #     "сколько исполнителей младше 0 лет?",
    #     "вернись в начало",
    #     "в начало",
    #     "покажи всех исполнителей",
    #     "все артисты",
    # ]

    # test_info_sentences = [
    #     'расскажи про кровосток',
    #     'информация про кизару',
    #     'информация о касте',
    #     'хочу узнать о многоточии',
    # ]

    # for sentence in test_info_sentences:
    #     print(f'{sentence=}')
    #     query = SentenceParser(sentence).parse(query_solver.state)
    #     # print(query)
    #     print('tags: ', query.tags_query_structure)
    #     res = query_solver.solve(query)
    #     if not res:
    #         print(query)
    #     print(res)
    #     print()

    while True:
        sentence = input('-> ')
        query = SentenceParser(sentence).parse(query_solver.state)
        query_solver.solve(query)